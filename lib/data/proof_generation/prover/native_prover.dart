// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `ios/Classes/prover.h`.
class NativeProverLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeProverLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeProverLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @return error code:
  /// PRPOVER_OK - in case of success.
  /// PPROVER_ERROR - in case of an error.
  int groth16_prover(
    ffi.Pointer<ffi.Void> zkey_buffer,
    int zkey_size,
    ffi.Pointer<ffi.Void> wtns_buffer,
    int wtns_size,
    ffi.Pointer<ffi.Char> proof_buffer,
    ffi.Pointer<ffi.UnsignedLong> proof_size,
    ffi.Pointer<ffi.Char> public_buffer,
    ffi.Pointer<ffi.UnsignedLong> public_size,
    ffi.Pointer<ffi.Char> error_msg,
    int error_msg_maxsize,
  ) {
    return _groth16_prover(
      zkey_buffer,
      zkey_size,
      wtns_buffer,
      wtns_size,
      proof_buffer,
      proof_size,
      public_buffer,
      public_size,
      error_msg,
      error_msg_maxsize,
    );
  }

  late final _groth16_proverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong)>>('groth16_prover');
  late final _groth16_prover = _groth16_proverPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Char>,
          int)>();
}

const int PRPOVER_OK = 0;

const int PPROVER_ERROR = 1;

const int PPROVER_ERROR_SHORT_BUFFER = 2;
