// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class _GWStatus extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external ffi.Pointer<ffi.Char> error_msg;
}

typedef GWStatus = _GWStatus;

/// Bindings to `ios/Classes/libwitness.h`.
class NativeWitnessCalcLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWitnessCalcLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWitnessCalcLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @return error code:
  /// WITNESSCALC_OK - in case of success.
  /// WITNESSCALC_ERROR - in case of an error.
  ///
  /// On success wtns_buffer is filled with witness data and
  /// wtns_size contains the number bytes copied to wtns_buffer.
  ///
  /// If wtns_buffer is too small then the function returns WITNESSCALC_ERROR_SHORT_BUFFER
  /// and the minimum size for wtns_buffer in wtns_size.
  int gw_calc_witness(
    ffi.Pointer<ffi.Char> inputs,
    ffi.Pointer<ffi.Char> graph_data,
    int graph_data_len,
    ffi.Pointer<ffi.Pointer<ffi.Void>> wtns_data,
    ffi.Pointer<ffi.UnsignedLong> wtns_len,
    ffi.Pointer<GWStatus> status,
  ) {
    return _gw_calc_witness(
      inputs,
      graph_data,
      graph_data_len,
      wtns_data,
      wtns_len,
      status,
    );
  }

  late final _gw_calc_witnessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedLong,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<GWStatus>,
          )>>('gw_calc_witness');
  late final _gw_calc_witness = _gw_calc_witnessPtr.asFunction<
      int Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        int,
        ffi.Pointer<ffi.Pointer<ffi.Void>>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.Pointer<GWStatus>,
      )>();

  /*void gw_free_status(ffi.Pointer<GWStatus> status) {
    return _gw_free_status(status);
  }

  late final _gw_free_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GWStatus>,
          )>>('gw_free_status');
  late final _gw_free_status = _gw_free_statusPtr.asFunction<
      void Function(
        ffi.Pointer<GWStatus>,
      )>();*/
}

const int GW_ERROR_CODE_OK = 0;

const int GW_ERROR_CODE_ERROR = 1;
