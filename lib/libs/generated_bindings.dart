// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

import 'package:ffi/ffi.dart';
import 'package:web3dart/crypto.dart';

/// Bindings to `ios/Classes/libiden3core.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, size_t)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Int8>)>>(
          'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, size_t)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, size_t)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      'strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int32, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Void>, size_t)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> strcasestr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strnstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Int8> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int8>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int8>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Int8> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, size_t)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, size_t)>>(
      'bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>> Function(
              ffi.Int32,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int32)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>> Function(
          int,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<rlimit>)>>('getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<rusage>)>>('getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, id_t, ffi.Int32)>>(
      'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<rlimit>)>>('setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int32>)>>(
          'wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int32>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int32>, ffi.Int32)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int32>, int)>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, id_t, ffi.Pointer<siginfo_t>, ffi.Int32)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(ffi.Pointer<ffi.Int32>, ffi.Int32,
              ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int32>, ffi.Int32,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int32>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int32> ___mb_cur_max =
      _lookup<ffi.Int32>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, size_t,
              size_t)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int atoi(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atol(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoll(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int32, ffi.Int32)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs(
    ffi.Pointer<wchar_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>,
              size_t)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int mbtowc(
    ffi.Pointer<wchar_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, size_t)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtof(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strtol(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int system(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<wchar_t> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>,
              size_t)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, wchar_t)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Int8> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  double erand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint16>)>>(
          'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint16>)>();

  ffi.Pointer<ffi.Int8> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> initstate(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint32, ffi.Pointer<ffi.Int8>, size_t)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  ffi.Pointer<ffi.Int8> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int64)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint16>)>>(
          'lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint16>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Int8> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, size_t)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int putenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>)>>(
          'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>>('seed48');
  late final _seed48 = _seed48Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void setkey(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, size_t)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> cgetcap(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int8>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int8>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int64> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int64>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int64>)>();

  int cgetset(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int cgetstr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int8> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Int8> Function(int, int)>();

  ffi.Pointer<ffi.Int8> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> getbsize(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Int8> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int strtonum(
    ffi.Pointer<ffi.Int8> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>, ffi.Int64, ffi.Int64,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Int8>>('suboptarg');

  ffi.Pointer<ffi.Int8> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Int8> value) => _suboptarg.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int32> _getdate_err =
      _lookup<ffi.Int32>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Int64> _timezone = _lookup<ffi.Int64>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int32> _daylight = _lookup<ffi.Int32>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Int8>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Int8> strptime(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Int8> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Int8>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Int8>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.Int32)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<timespec>, ffi.Int32)>>('timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Uint8>> iden_alloc_hashes(
    int n,
  ) {
    return _iden_alloc_hashes(
      n,
    );
  }

  late final _iden_alloc_hashesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Uint8>> Function(
              ffi.Int32)>>('iden_alloc_hashes');
  late final _iden_alloc_hashes = _iden_alloc_hashesPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Uint8>> Function(int)>();

  void iden_set_hash_idx(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> hashes,
    ffi.Pointer<ffi.Uint8> hash,
    int idx,
  ) {
    return _iden_set_hash_idx(
      hashes,
      hash,
      idx,
    );
  }

  late final _iden_set_hash_idxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('iden_set_hash_idx');
  late final _iden_set_hash_idx = _iden_set_hash_idxPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Uint8>, int)>();

  void iden_free_hashes(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> hashes,
    int num,
  ) {
    return _iden_free_hashes(
      hashes,
      num,
    );
  }

  late final _iden_free_hashesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              size_t)>>('iden_free_hashes');
  late final _iden_free_hashes = _iden_free_hashesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int)>();

  ffi.Pointer<ffi.Uint8> iden_get_hash_at_idx(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> hashes,
    int idx,
  ) {
    return _iden_get_hash_at_idx(
      hashes,
      idx,
    );
  }

  late final _iden_get_hash_at_idxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Int32)>>('iden_get_hash_at_idx');
  late final _iden_get_hash_at_idx = _iden_get_hash_at_idxPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int)>();

  ffi.Pointer<ffi.Void> _iden_get_ptr_by_idx(
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    int idx,
  ) {
    return __iden_get_ptr_by_idx(
      data,
      idx,
    );
  }

  late final __iden_get_ptr_by_idxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Int32)>>('_iden_get_ptr_by_idx');
  late final __iden_get_ptr_by_idx = __iden_get_ptr_by_idxPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  int IDENClaimTreeEntryHash(
    ffi.Pointer<IDENMerkleTreeHash> indexHash,
    ffi.Pointer<IDENMerkleTreeHash> valueHash,
    ffi.Pointer<IDENClaim> claim,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimTreeEntryHash(
      indexHash,
      valueHash,
      claim,
      status,
    );
  }

  late final _IDENClaimTreeEntryHashPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<IDENMerkleTreeHash>,
              ffi.Pointer<IDENMerkleTreeHash>,
              ffi.Pointer<IDENClaim>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENClaimTreeEntryHash');
  late final _IDENClaimTreeEntryHash = _IDENClaimTreeEntryHashPtr.asFunction<
      int Function(
          ffi.Pointer<IDENMerkleTreeHash>,
          ffi.Pointer<IDENMerkleTreeHash>,
          ffi.Pointer<IDENClaim>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENMerkleTreeEntryHash(
    ffi.Pointer<IDENMerkleTreeHash> indexHash,
    ffi.Pointer<IDENMerkleTreeHash> valueHash,
    ffi.Pointer<IDENMerkleTreeEntry> treeEntry,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENMerkleTreeEntryHash(
      indexHash,
      valueHash,
      treeEntry,
      status,
    );
  }

  late final _IDENMerkleTreeEntryHashPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<IDENMerkleTreeHash>,
                  ffi.Pointer<IDENMerkleTreeHash>,
                  ffi.Pointer<IDENMerkleTreeEntry>,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENMerkleTreeEntryHash');
  late final _IDENMerkleTreeEntryHash = _IDENMerkleTreeEntryHashPtr.asFunction<
      int Function(
          ffi.Pointer<IDENMerkleTreeHash>,
          ffi.Pointer<IDENMerkleTreeHash>,
          ffi.Pointer<IDENMerkleTreeEntry>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENNewMerkleTree(
    ffi.Pointer<ffi.Pointer<IDENMerkleTree>> merkleTree,
    int maxLevels,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENNewMerkleTree(
      merkleTree,
      maxLevels,
      status,
    );
  }

  late final _IDENNewMerkleTreePtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.Pointer<ffi.Pointer<IDENMerkleTree>>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENNewMerkleTree');
  late final _IDENNewMerkleTree = _IDENNewMerkleTreePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<IDENMerkleTree>>, int,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  void IDENFreeMerkleTree(
    ffi.Pointer<IDENMerkleTree> mt,
  ) {
    return _IDENFreeMerkleTree(
      mt,
    );
  }

  late final _IDENFreeMerkleTreePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IDENMerkleTree>)>>(
      'IDENFreeMerkleTree');
  late final _IDENFreeMerkleTree = _IDENFreeMerkleTreePtr.asFunction<
      void Function(ffi.Pointer<IDENMerkleTree>)>();

  int IDENMerkleTreeAddClaim(
    ffi.Pointer<IDENMerkleTree> merkleTree,
    ffi.Pointer<IDENClaim> claim,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENMerkleTreeAddClaim(
      merkleTree,
      claim,
      status,
    );
  }

  late final _IDENMerkleTreeAddClaimPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.Pointer<IDENMerkleTree>, ffi.Pointer<IDENClaim>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENMerkleTreeAddClaim');
  late final _IDENMerkleTreeAddClaim = _IDENMerkleTreeAddClaimPtr.asFunction<
      int Function(ffi.Pointer<IDENMerkleTree>, ffi.Pointer<IDENClaim>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENMerkleTreeAddEntry(
    ffi.Pointer<IDENMerkleTree> merkleTree,
    ffi.Pointer<IDENMerkleTreeEntry> entry,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENMerkleTreeAddEntry(
      merkleTree,
      entry,
      status,
    );
  }

  late final _IDENMerkleTreeAddEntryPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<IDENMerkleTree>,
              ffi.Pointer<IDENMerkleTreeEntry>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENMerkleTreeAddEntry');
  late final _IDENMerkleTreeAddEntry = _IDENMerkleTreeAddEntryPtr.asFunction<
      int Function(
          ffi.Pointer<IDENMerkleTree>,
          ffi.Pointer<IDENMerkleTreeEntry>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENMerkleTreeRoot(
    ffi.Pointer<IDENMerkleTreeHash> hash,
    ffi.Pointer<IDENMerkleTree> mt,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENMerkleTreeRoot(
      hash,
      mt,
      status,
    );
  }

  late final _IDENMerkleTreeRootPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<IDENMerkleTreeHash>,
              ffi.Pointer<IDENMerkleTree>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENMerkleTreeRoot');
  late final _IDENMerkleTreeRoot = _IDENMerkleTreeRootPtr.asFunction<
      int Function(ffi.Pointer<IDENMerkleTreeHash>, ffi.Pointer<IDENMerkleTree>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENMerkleTreeGenerateProof(
    ffi.Pointer<ffi.Pointer<IDENProof>> proof,
    ffi.Pointer<IDENMerkleTree> mt,
    IDENMerkleTreeHash indexHash,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENMerkleTreeGenerateProof(
      proof,
      mt,
      indexHash,
      status,
    );
  }

  late final _IDENMerkleTreeGenerateProofPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<IDENProof>>,
                  ffi.Pointer<IDENMerkleTree>,
                  IDENMerkleTreeHash,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENMerkleTreeGenerateProof');
  late final _IDENMerkleTreeGenerateProof =
      _IDENMerkleTreeGenerateProofPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<IDENProof>>,
              ffi.Pointer<IDENMerkleTree>,
              IDENMerkleTreeHash,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  void IDENFreeProof(
    ffi.Pointer<IDENProof> proof,
  ) {
    return _IDENFreeProof(
      proof,
    );
  }

  late final _IDENFreeProofPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IDENProof>)>>(
          'IDENFreeProof');
  late final _IDENFreeProof =
      _IDENFreeProofPtr.asFunction<void Function(ffi.Pointer<IDENProof>)>();

  int IDENidGenesisFromIdenState(
    ffi.Pointer<IDENId> id,
    IDENMerkleTreeHash state,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENidGenesisFromIdenState(
      id,
      state,
      status,
    );
  }

  late final _IDENidGenesisFromIdenStatePtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(ffi.Pointer<IDENId>, IDENMerkleTreeHash,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENidGenesisFromIdenState');
  late final _IDENidGenesisFromIdenState =
      _IDENidGenesisFromIdenStatePtr.asFunction<
          int Function(ffi.Pointer<IDENId>, IDENMerkleTreeHash,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  void IDENFreeStatus(
    ffi.Pointer<IDENStatus> status,
  ) {
    return _IDENFreeStatus(
      status,
    );
  }

  late final _IDENFreeStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IDENStatus>)>>(
          'IDENFreeStatus');
  late final _IDENFreeStatus =
      _IDENFreeStatusPtr.asFunction<void Function(ffi.Pointer<IDENStatus>)>();

  int IDENBigIntFromString(
    ffi.Pointer<ffi.Pointer<IDENBigInt>> bigInt,
    ffi.Pointer<ffi.Int8> bigIntStr,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENBigIntFromString(
      bigInt,
      bigIntStr,
      status,
    );
  }

  late final _IDENBigIntFromStringPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<IDENBigInt>>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENBigIntFromString');
  late final _IDENBigIntFromString = _IDENBigIntFromStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<IDENBigInt>>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  void IDENFreeBigInt(
    ffi.Pointer<IDENBigInt> bi,
  ) {
    return _IDENFreeBigInt(
      bi,
    );
  }

  late final _IDENFreeBigIntPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IDENBigInt>)>>(
          'IDENFreeBigInt');
  late final _IDENFreeBigInt =
      _IDENFreeBigIntPtr.asFunction<void Function(ffi.Pointer<IDENBigInt>)>();

  int IDENNewClaim(
    ffi.Pointer<ffi.Pointer<IDENClaim>> claim,
    ffi.Pointer<ffi.Uint8> schemaHash,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENNewClaim(
      claim,
      schemaHash,
      status,
    );
  }

  late final _IDENNewClaimPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<IDENClaim>>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENNewClaim');
  late final _IDENNewClaim = _IDENNewClaimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<IDENClaim>>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENClaimSetValueDataInt(
    ffi.Pointer<IDENClaim> c,
    ffi.Pointer<IDENBigInt> slotA,
    ffi.Pointer<IDENBigInt> slotB,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimSetValueDataInt(
      c,
      slotA,
      slotB,
      status,
    );
  }

  late final _IDENClaimSetValueDataIntPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<IDENClaim>,
                  ffi.Pointer<IDENBigInt>,
                  ffi.Pointer<IDENBigInt>,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENClaimSetValueDataInt');
  late final _IDENClaimSetValueDataInt =
      _IDENClaimSetValueDataIntPtr.asFunction<
          int Function(ffi.Pointer<IDENClaim>, ffi.Pointer<IDENBigInt>,
              ffi.Pointer<IDENBigInt>, ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENClaimSetIndexDataInt(
    ffi.Pointer<IDENClaim> c,
    ffi.Pointer<IDENBigInt> slotA,
    ffi.Pointer<IDENBigInt> slotB,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimSetIndexDataInt(
      c,
      slotA,
      slotB,
      status,
    );
  }

  late final _IDENClaimSetIndexDataIntPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<IDENClaim>,
                  ffi.Pointer<IDENBigInt>,
                  ffi.Pointer<IDENBigInt>,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENClaimSetIndexDataInt');
  late final _IDENClaimSetIndexDataInt =
      _IDENClaimSetIndexDataIntPtr.asFunction<
          int Function(ffi.Pointer<IDENClaim>, ffi.Pointer<IDENBigInt>,
              ffi.Pointer<IDENBigInt>, ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENClaimSetIndexID(
    ffi.Pointer<IDENClaim> c,
    IDENId id,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimSetIndexID(
      c,
      id,
      status,
    );
  }

  late final _IDENClaimSetIndexIDPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.Pointer<IDENClaim>, IDENId,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENClaimSetIndexID');
  late final _IDENClaimSetIndexID = _IDENClaimSetIndexIDPtr.asFunction<
      int Function(ffi.Pointer<IDENClaim>, IDENId,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENClaimSetRevocationNonce(
    ffi.Pointer<IDENClaim> c,
    int revNonce,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimSetRevocationNonce(
      c,
      revNonce,
      status,
    );
  }

  late final _IDENClaimSetRevocationNoncePtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(ffi.Pointer<IDENClaim>, ffi.Uint64,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENClaimSetRevocationNonce');
  late final _IDENClaimSetRevocationNonce =
      _IDENClaimSetRevocationNoncePtr.asFunction<
          int Function(ffi.Pointer<IDENClaim>, int,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENClaimSetRevocationNonceAsBigInt(
    ffi.Pointer<IDENClaim> c,
    ffi.Pointer<IDENBigInt> revNonce,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimSetRevocationNonceAsBigInt(
      c,
      revNonce,
      status,
    );
  }

  late final _IDENClaimSetRevocationNonceAsBigIntPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(ffi.Pointer<IDENClaim>, ffi.Pointer<IDENBigInt>,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENClaimSetRevocationNonceAsBigInt');
  late final _IDENClaimSetRevocationNonceAsBigInt =
      _IDENClaimSetRevocationNonceAsBigIntPtr.asFunction<
          int Function(ffi.Pointer<IDENClaim>, ffi.Pointer<IDENBigInt>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENClaimSetExpirationDate(
    ffi.Pointer<IDENClaim> c,
    int t,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimSetExpirationDate(
      c,
      t,
      status,
    );
  }

  late final _IDENClaimSetExpirationDatePtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(ffi.Pointer<IDENClaim>, time_t,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENClaimSetExpirationDate');
  late final _IDENClaimSetExpirationDate =
      _IDENClaimSetExpirationDatePtr.asFunction<
          int Function(ffi.Pointer<IDENClaim>, int,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENClaimTreeEntry(
    ffi.Pointer<IDENMerkleTreeEntry> treeEntry,
    ffi.Pointer<IDENClaim> claim,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENClaimTreeEntry(
      treeEntry,
      claim,
      status,
    );
  }

  late final _IDENClaimTreeEntryPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<IDENMerkleTreeEntry>,
              ffi.Pointer<IDENClaim>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENClaimTreeEntry');
  late final _IDENClaimTreeEntry = _IDENClaimTreeEntryPtr.asFunction<
      int Function(ffi.Pointer<IDENMerkleTreeEntry>, ffi.Pointer<IDENClaim>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  void IDENFreeClaim(
    ffi.Pointer<IDENClaim> claim,
  ) {
    return _IDENFreeClaim(
      claim,
    );
  }

  late final _IDENFreeClaimPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IDENClaim>)>>(
          'IDENFreeClaim');
  late final _IDENFreeClaim =
      _IDENFreeClaimPtr.asFunction<void Function(ffi.Pointer<IDENClaim>)>();

  int IDENPrepareAtomicQueryMTPInputs(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> jsonResponse,
    ffi.Pointer<IDENAtomicQueryMTPInputs> in1,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENPrepareAtomicQueryMTPInputs(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _IDENPrepareAtomicQueryMTPInputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Pointer<IDENAtomicQueryMTPInputs>,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENPrepareAtomicQueryMTPInputs');
  late final _IDENPrepareAtomicQueryMTPInputs =
      _IDENPrepareAtomicQueryMTPInputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<IDENAtomicQueryMTPInputs>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENPrepareAtomicQuerySigInputs(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> jsonResponse,
    ffi.Pointer<IDENAtomicQuerySigInputs> in1,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENPrepareAtomicQuerySigInputs(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _IDENPrepareAtomicQuerySigInputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Pointer<IDENAtomicQuerySigInputs>,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENPrepareAtomicQuerySigInputs');
  late final _IDENPrepareAtomicQuerySigInputs =
      _IDENPrepareAtomicQuerySigInputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<IDENAtomicQuerySigInputs>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENPrepareAuthInputs(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> response,
    ffi.Pointer<IDENAuthInputs> in1,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENPrepareAuthInputs(
      response,
      in1,
      status,
    );
  }

  late final _IDENPrepareAuthInputsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<IDENAuthInputs>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENPrepareAuthInputs');
  late final _IDENPrepareAuthInputs = _IDENPrepareAuthInputsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<IDENAuthInputs>, ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENCalculateGenesisID(
    ffi.Pointer<IDENId> id,
    IDENMerkleTreeHash clr,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENCalculateGenesisID(
      id,
      clr,
      status,
    );
  }

  late final _IDENCalculateGenesisIDPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.Pointer<IDENId>, IDENMerkleTreeHash,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENCalculateGenesisID');
  late final _IDENCalculateGenesisID = _IDENCalculateGenesisIDPtr.asFunction<
      int Function(ffi.Pointer<IDENId>, IDENMerkleTreeHash,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENHashOfHashes(
    ffi.Pointer<IDENMerkleTreeHash> dst,
    ffi.Pointer<ffi.Pointer<IDENMerkleTreeHash>> hashes,
    int n,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENHashOfHashes(
      dst,
      hashes,
      n,
      status,
    );
  }

  late final _IDENHashOfHashesPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<IDENMerkleTreeHash>,
              ffi.Pointer<ffi.Pointer<IDENMerkleTreeHash>>,
              size_t,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENHashOfHashes');
  late final _IDENHashOfHashes = _IDENHashOfHashesPtr.asFunction<
      int Function(
          ffi.Pointer<IDENMerkleTreeHash>,
          ffi.Pointer<ffi.Pointer<IDENMerkleTreeHash>>,
          int,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  void IDENHashFromUInt64(
    ffi.Pointer<IDENMerkleTreeHash> dst,
    int i,
  ) {
    return _IDENHashFromUInt64(
      dst,
      i,
    );
  }

  late final _IDENHashFromUInt64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IDENMerkleTreeHash>,
              ffi.Uint64)>>('IDENHashFromUInt64');
  late final _IDENHashFromUInt64 = _IDENHashFromUInt64Ptr.asFunction<
      void Function(ffi.Pointer<IDENMerkleTreeHash>, int)>();

  int IDENHashFromBigInt(
    ffi.Pointer<IDENMerkleTreeHash> dst,
    ffi.Pointer<IDENBigInt> i,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENHashFromBigInt(
      dst,
      i,
      status,
    );
  }

  late final _IDENHashFromBigIntPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<IDENMerkleTreeHash>,
              ffi.Pointer<IDENBigInt>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENHashFromBigInt');
  late final _IDENHashFromBigInt = _IDENHashFromBigIntPtr.asFunction<
      int Function(ffi.Pointer<IDENMerkleTreeHash>, ffi.Pointer<IDENBigInt>,
          ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENJsonLDParseClaim(
    ffi.Pointer<ffi.Pointer<IDENClaim>> claim,
    ffi.Pointer<ffi.Int8> credential,
    ffi.Pointer<ffi.Int8> schema,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENJsonLDParseClaim(
      claim,
      credential,
      schema,
      status,
    );
  }

  late final _IDENJsonLDParseClaimPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<IDENClaim>>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>>('IDENJsonLDParseClaim');
  late final _IDENJsonLDParseClaim = _IDENJsonLDParseClaimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<IDENClaim>>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<IDENStatus>>)>();

  int IDENJsonLDGetFieldSlotIndex(
    ffi.Pointer<ffi.Int32> slotIndex,
    ffi.Pointer<ffi.Int8> field,
    ffi.Pointer<ffi.Int8> claimType,
    ffi.Pointer<ffi.Int8> schema,
    ffi.Pointer<ffi.Pointer<IDENStatus>> status,
  ) {
    return _IDENJsonLDGetFieldSlotIndex(
      slotIndex,
      field,
      claimType,
      schema,
      status,
    );
  }

  late final _IDENJsonLDGetFieldSlotIndexPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<IDENStatus>>)>>(
      'IDENJsonLDGetFieldSlotIndex');
  late final _IDENJsonLDGetFieldSlotIndex =
      _IDENJsonLDGetFieldSlotIndexPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<IDENStatus>>)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> __mbstate8;

  @ffi.Int64()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Int64;
typedef size_t = __darwin_size_t;
typedef __darwin_size_t = ffi.Uint64;
typedef errno_t = ffi.Int32;
typedef rsize_t = __darwin_size_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Int64;

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.Uint32()
  external int __eax;

  @ffi.Uint32()
  external int __ebx;

  @ffi.Uint32()
  external int __ecx;

  @ffi.Uint32()
  external int __edx;

  @ffi.Uint32()
  external int __edi;

  @ffi.Uint32()
  external int __esi;

  @ffi.Uint32()
  external int __ebp;

  @ffi.Uint32()
  external int __esp;

  @ffi.Uint32()
  external int __ss;

  @ffi.Uint32()
  external int __eflags;

  @ffi.Uint32()
  external int __eip;

  @ffi.Uint32()
  external int __cs;

  @ffi.Uint32()
  external int __ds;

  @ffi.Uint32()
  external int __es;

  @ffi.Uint32()
  external int __fs;

  @ffi.Uint32()
  external int __gs;
}

class __darwin_fp_control extends ffi.Opaque {}

class __darwin_fp_status extends ffi.Opaque {}

class __darwin_mmst_reg extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.Int8> __mmst_reg;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int8> __mmst_rsrv;
}

class __darwin_xmm_reg extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __xmm_reg;
}

class __darwin_ymm_reg extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __ymm_reg;
}

class __darwin_zmm_reg extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> __zmm_reg;
}

class __darwin_opmask_reg extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opmask_reg;
}

class __darwin_i386_float_state extends ffi.Opaque {}

class __darwin_i386_avx_state extends ffi.Opaque {}

class __darwin_i386_avx512_state extends ffi.Opaque {}

class __darwin_i386_exception_state extends ffi.Struct {
  @__uint16_t()
  external int __trapno;

  @__uint16_t()
  external int __cpu;

  @__uint32_t()
  external int __err;

  @__uint32_t()
  external int __faultvaddr;
}

typedef __uint16_t = ffi.Uint16;
typedef __uint32_t = ffi.Uint32;

class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.Uint32()
  external int __dr0;

  @ffi.Uint32()
  external int __dr1;

  @ffi.Uint32()
  external int __dr2;

  @ffi.Uint32()
  external int __dr3;

  @ffi.Uint32()
  external int __dr4;

  @ffi.Uint32()
  external int __dr5;

  @ffi.Uint32()
  external int __dr6;

  @ffi.Uint32()
  external int __dr7;
}

class __x86_instruction_state extends ffi.Struct {
  @ffi.Int32()
  external int __insn_stream_valid_bytes;

  @ffi.Int32()
  external int __insn_offset;

  @ffi.Int32()
  external int __out_of_synch;

  @ffi.Array.multi([2380])
  external ffi.Array<__uint8_t> __insn_bytes;

  @ffi.Array.multi([64])
  external ffi.Array<__uint8_t> __insn_cacheline;
}

typedef __uint8_t = ffi.Uint8;

class __last_branch_record extends ffi.Opaque {}

class __last_branch_state extends ffi.Opaque {}

class __x86_pagein_state extends ffi.Struct {
  @ffi.Int32()
  external int __pagein_error;
}

class __darwin_x86_thread_state64 extends ffi.Struct {
  @__uint64_t()
  external int __rax;

  @__uint64_t()
  external int __rbx;

  @__uint64_t()
  external int __rcx;

  @__uint64_t()
  external int __rdx;

  @__uint64_t()
  external int __rdi;

  @__uint64_t()
  external int __rsi;

  @__uint64_t()
  external int __rbp;

  @__uint64_t()
  external int __rsp;

  @__uint64_t()
  external int __r8;

  @__uint64_t()
  external int __r9;

  @__uint64_t()
  external int __r10;

  @__uint64_t()
  external int __r11;

  @__uint64_t()
  external int __r12;

  @__uint64_t()
  external int __r13;

  @__uint64_t()
  external int __r14;

  @__uint64_t()
  external int __r15;

  @__uint64_t()
  external int __rip;

  @__uint64_t()
  external int __rflags;

  @__uint64_t()
  external int __cs;

  @__uint64_t()
  external int __fs;

  @__uint64_t()
  external int __gs;
}

typedef __uint64_t = ffi.Uint64;

class __darwin_x86_thread_full_state64 extends ffi.Struct {
  external __darwin_x86_thread_state64 __ss64;

  @__uint64_t()
  external int __ds;

  @__uint64_t()
  external int __es;

  @__uint64_t()
  external int __ss;

  @__uint64_t()
  external int __gsbase;
}

class __darwin_x86_float_state64 extends ffi.Opaque {}

class __darwin_x86_avx_state64 extends ffi.Opaque {}

class __darwin_x86_avx512_state64 extends ffi.Opaque {}

class __darwin_x86_exception_state64 extends ffi.Struct {
  @__uint16_t()
  external int __trapno;

  @__uint16_t()
  external int __cpu;

  @__uint32_t()
  external int __err;

  @__uint64_t()
  external int __faultvaddr;
}

class __darwin_x86_debug_state64 extends ffi.Struct {
  @__uint64_t()
  external int __dr0;

  @__uint64_t()
  external int __dr1;

  @__uint64_t()
  external int __dr2;

  @__uint64_t()
  external int __dr3;

  @__uint64_t()
  external int __dr4;

  @__uint64_t()
  external int __dr5;

  @__uint64_t()
  external int __dr6;

  @__uint64_t()
  external int __dr7;
}

class __darwin_x86_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

class __darwin_mcontext32 extends ffi.Opaque {}

class __darwin_mcontext_avx32 extends ffi.Opaque {}

class __darwin_mcontext_avx512_32 extends ffi.Opaque {}

class __darwin_mcontext64 extends ffi.Opaque {}

class __darwin_mcontext64_full extends ffi.Opaque {}

class __darwin_mcontext_avx64 extends ffi.Opaque {}

class __darwin_mcontext_avx64_full extends ffi.Opaque {}

class __darwin_mcontext_avx512_64 extends ffi.Opaque {}

class __darwin_mcontext_avx512_64_full extends ffi.Opaque {}

class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int32()
  external int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {
  @ffi.Int32()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

class sigval extends ffi.Union {
  @ffi.Int32()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

class sigevent extends ffi.Struct {
  @ffi.Int32()
  external int sigev_notify;

  @ffi.Int32()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

class __siginfo extends ffi.Struct {
  @ffi.Int32()
  external int si_signo;

  @ffi.Int32()
  external int si_errno;

  @ffi.Int32()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int32()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Int64()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint64> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int32;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int32, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int32()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int32()
  external int sa_flags;
}

class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>
      sv_handler;

  @ffi.Int32()
  external int sv_mask;

  @ffi.Int32()
  external int sv_flags;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ss_sp;

  @ffi.Int32()
  external int ss_onstack;
}

class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Int64;
typedef __darwin_suseconds_t = __int32_t;

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Int64()
  external int ru_maxrss;

  @ffi.Int64()
  external int ru_ixrss;

  @ffi.Int64()
  external int ru_idrss;

  @ffi.Int64()
  external int ru_isrss;

  @ffi.Int64()
  external int ru_minflt;

  @ffi.Int64()
  external int ru_majflt;

  @ffi.Int64()
  external int ru_nswap;

  @ffi.Int64()
  external int ru_inblock;

  @ffi.Int64()
  external int ru_oublock;

  @ffi.Int64()
  external int ru_msgsnd;

  @ffi.Int64()
  external int ru_msgrcv;

  @ffi.Int64()
  external int ru_nsignals;

  @ffi.Int64()
  external int ru_nvcsw;

  @ffi.Int64()
  external int ru_nivcsw;
}

class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

class wait extends ffi.Opaque {}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

typedef wchar_t = __darwin_wchar_t;
typedef __darwin_wchar_t = ffi.Int32;
typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;

class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

typedef clock_t = __darwin_clock_t;
typedef __darwin_clock_t = ffi.Uint64;
typedef time_t = __darwin_time_t;

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

class _IDENBigInt extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @size_t()
  external int data_len;
}

abstract class IDENtreeEntryStatus {
  static const int IDENTREEENTRY_OK = 0;
  static const int IDENTREEENTRY_OUT_OF_MEMORY = 1;
  static const int IDENTREEENTRY_CREATE_CLAIM_ERROR = 2;
  static const int IDENTREEENTRY_EXTRACT_CLAIM_ERROR = 3;
}

class _IDENMerkleTreeEntry extends ffi.Struct {
  @ffi.Array.multi([4, 32])
  external ffi.Array<ffi.Array<ffi.Uint8>> index;

  @ffi.Array.multi([4, 32])
  external ffi.Array<ffi.Array<ffi.Uint8>> value;
}

class _IDENMerkleTree extends ffi.Struct {
  @uintptr_t()
  external int handle;
}

typedef uintptr_t = ffi.Uint64;

abstract class IDENStatusCode {
  static const int IDENSTATUSCODE_ERROR = 0;
  static const int IDENSTATUSCODE_NIL_POINTER = 1;
  static const int IDENSTATUSCODE_OUT_OF_MEMORY = 2;
  static const int IDENSTATUSCODE_GENESIS_ID_ERROR = 3;
  static const int IDENSTATUSCODE_MERKLE_TREE_ERROR = 4;
  static const int IDENSTATUSCODE_MERKLE_TREE_HASH_ERROR = 5;
  static const int IDENSTATUSCODE_PROOF_GENERATION_ERROR = 6;
  static const int IDENSTATUSCODE_CLAIM_ERROR = 7;
  static const int IDENSTATUSCODE_IDEN3CREDENTIAL_PARSE_ERROR = 8;
  static const int IDENSTATUSCODE_GET_FIELD_SLOT_INDEX_ERROR = 9;
  static const int IDENSTATUSCODE_POSEIDON_ERROR = 10;
}

class _IDENStatus extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external ffi.Pointer<ffi.Int8> error_msg;
}

class _IDENProof extends ffi.Struct {
  @ffi.Uint8()
  external int existence;

  external ffi.Pointer<ffi.Pointer<ffi.Uint8>> siblings;

  @size_t()
  external int siblings_num;

  external ffi.Pointer<ffi.Uint8> auxNodeKey;

  external ffi.Pointer<ffi.Uint8> auxNodeValue;

  static ffi.Pointer<_IDENProof> fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENProof> proof = malloc<_IDENProof>();
    proof.ref.existence = json['existence'];
    proof.ref.siblings_num = json['siblings_num'];
    proof.ref.siblings = malloc<ffi.Pointer<ffi.Uint8>>();
    for (int i = 0; i < proof.ref.siblings_num; i++) {
      List<int> siblingBytes = hexToBytes(json['siblings'][i]);
      ffi.Pointer<ffi.Uint8> child = malloc<ffi.Uint8>(siblingBytes.length);
      for (int j = 0; j < siblingBytes.length; j++) {
        child[j] = siblingBytes[j];
      }
      proof.ref.siblings[i] = child;
    }
    /*List<int> auxNodeKeyBytes = hexToBytes(json['auxNodeKey']);
    var result = "";
    /*for (int i = 0; i < 31; i++) {
      result = result + idGenesis[i].toRadixString(16).padLeft(2, '0');
      // print(result);
    }*/
    if (auxNodeKeyBytes.length > 0) {
      proof.ref.auxNodeKey = malloc<ffi.Uint8>(auxNodeKeyBytes.length);
      for (int i = 0; i < auxNodeKeyBytes.length; i++) {
        proof.ref.auxNodeKey[i] = auxNodeKeyBytes[i];
      }
    } else {*/
    proof.ref.auxNodeKey = ffi.nullptr;
    //}
    /*List<int> auxNodeValueBytes = hexToBytes(json['auxNodeValue']);
    if (auxNodeValueBytes.length > 0) {
      proof.ref.auxNodeValue = malloc<ffi.Uint8>(auxNodeValueBytes.length);
      for (int i = 0; i < auxNodeValueBytes.length; i++) {
        proof.ref.auxNodeValue[i] = auxNodeValueBytes[i];
      }
    } else {*/
    proof.ref.auxNodeValue = ffi.nullptr;
    //}
    return proof;
  }

  Map<String, dynamic> toJson() {
    List sib = [];
    for (int i = 0; i < siblings_num; i++) {
      List<int> dataBytes = List.filled(32, 0);
      ffi.Pointer<ffi.Uint8> child = siblings[i];
      for (int j = 0; j < 32; j++) {
        dataBytes[j] = child[j];
      }
      sib.add(bytesToHex(dataBytes));
    }

    List<int> auxNodeKeyBytes = List.filled(32, 0);
    if (auxNodeKey != ffi.nullptr) {
      for (int j = 0; j < 32; j++) {
        auxNodeKeyBytes[j] = auxNodeKey[j];
      }
    }

    List<int> auxNodeValueBytes = List.filled(32, 0);
    if (auxNodeValue != ffi.nullptr) {
      for (int j = 0; j < 32; j++) {
        auxNodeValueBytes[j] = auxNodeValue[j];
      }
    }
    return {
      'existence': existence,
      'siblings': sib,
      'siblings_num': siblings_num,
      'auxNodeKey': bytesToHex(auxNodeKeyBytes),
      'auxNodeValue': bytesToHex(auxNodeValueBytes),
    };
  }
}

class _IDENClaim extends ffi.Struct {
  @uintptr_t()
  external int handle;

  static ffi.Pointer<_IDENClaim> fromJson(Map<String, dynamic> json) {
    // TODO pubX, pubY, revNonce
    ffi.Pointer<_IDENClaim> claim = malloc<_IDENClaim>();
    claim.ref.handle = json['handle'];
    return claim;
  }

  Map<String, dynamic> toJson() => {
        // TODO pubX, pubY, revNonce
        'handle': handle,
      };
}

class _IDENMerkleTreeHash extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> data;

  static _IDENMerkleTreeHash fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENMerkleTreeHash> hash = malloc<_IDENMerkleTreeHash>();
    List<int> dataBytes = hexToBytes(json['data']);
    for (int i = 0; i < dataBytes.length; i++) {
      hash.ref.data[i] = dataBytes[i];
    }
    return hash.ref;
  }

  Map<String, dynamic> toJson() {
    List<int> dataBytes = List.filled(32, 0);
    for (int i = 0; i < 32; i++) {
      dataBytes[i] = data[i];
    }
    return {'data': bytesToHex(dataBytes)};
  }
}

class _IDENId extends ffi.Struct {
  @ffi.Array.multi([31])
  external ffi.Array<ffi.Uint8> data;

  static _IDENId fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENId> idenId = malloc<_IDENId>();
    List<int> dataBytes = hexToBytes(json['data']);
    for (int i = 0; i < dataBytes.length; i++) {
      idenId.ref.data[i] = dataBytes[i];
    }
    return idenId.ref;
  }

  Map<String, dynamic> toJson() {
    List<int> dataBytes = List.filled(31, 0);
    for (int i = 0; i < 31; i++) {
      dataBytes[i] = data[i];
    }

    return {'data': bytesToHex(dataBytes)};
  }
}

class _IDENBJJSignature extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> data;

  static _IDENBJJSignature fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENBJJSignature> bjjSignature = malloc<_IDENBJJSignature>();
    List<int> dataBytes = hexToBytes(json['data']);
    for (int i = 0; i < dataBytes.length; i++) {
      bjjSignature.ref.data[i] = dataBytes[i];
    }
    return bjjSignature.ref;
  }

  Map<String, dynamic> toJson() {
    List<int> dataBytes = List.filled(31, 0);
    for (int i = 0; i < 31; i++) {
      dataBytes[i] = data[i];
    }

    return {'data': bytesToHex(dataBytes)};
  }
}

class _IDENTreeState extends ffi.Struct {
  external IDENMerkleTreeHash state;

  external IDENMerkleTreeHash claims_root;

  external IDENMerkleTreeHash revocation_root;

  external IDENMerkleTreeHash root_of_roots;

  static _IDENTreeState fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENTreeState> treeState = malloc<_IDENTreeState>();
    treeState.ref.state = IDENMerkleTreeHash.fromJson(json['state']);
    treeState.ref.claims_root =
        IDENMerkleTreeHash.fromJson(json['claims_root']);
    treeState.ref.revocation_root =
        IDENMerkleTreeHash.fromJson(json['revocation_root']);
    treeState.ref.root_of_roots =
        IDENMerkleTreeHash.fromJson(json['root_of_roots']);
    return treeState.ref;
  }

  Map<String, dynamic> toJson() => {
        'state': state.toJson(),
        'claims_root': claims_root.toJson(),
        'revocation_root': revocation_root.toJson(),
        'root_of_roots': root_of_roots.toJson()
      };
}

typedef IDENMerkleTreeHash = _IDENMerkleTreeHash;

class _IDENRevocationStatus extends ffi.Struct {
  external IDENTreeState tree_state;

  external ffi.Pointer<IDENProof> proof;

  static _IDENRevocationStatus fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENRevocationStatus> revocationStatus =
        malloc<_IDENRevocationStatus>();
    revocationStatus.ref.tree_state =
        IDENTreeState.fromJson(json['tree_state']);
    revocationStatus.ref.proof = IDENProof.fromJson(json['proof']);
    return revocationStatus.ref;
  }

  Map<String, dynamic> toJson() => {
        'tree_state': tree_state.toJson(),
        'proof': proof != ffi.nullptr ? proof.ref.toJson() : "",
      };
}

typedef IDENTreeState = _IDENTreeState;
typedef IDENProof = _IDENProof;

class _IDENBCircuitsBJJSignatureProof extends ffi.Struct {
  external IDENId issuer_id;

  external IDENBJJSignature signature;

  external IDENTreeState issuer_tree_state;

  external ffi.Pointer<IDENClaim> issuer_auth_claim;

  external ffi.Pointer<IDENProof> issuer_auth_claim_mtp;

  external IDENRevocationStatus issuer_auth_non_rev_proof;

  static _IDENBCircuitsBJJSignatureProof fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENBCircuitsBJJSignatureProof> bjjSignatureProof =
        malloc<_IDENBCircuitsBJJSignatureProof>();
    bjjSignatureProof.ref.issuer_id = IDENId.fromJson(json['issuer_id']);
    bjjSignatureProof.ref.signature =
        IDENBJJSignature.fromJson(json['signature']);
    bjjSignatureProof.ref.issuer_tree_state =
        IDENTreeState.fromJson(json['issuer_tree_state']);
    bjjSignatureProof.ref.issuer_auth_claim =
        IDENClaim.fromJson(json['issuer_auth_claim']);
    bjjSignatureProof.ref.issuer_auth_claim_mtp =
        IDENProof.fromJson(json['issuer_auth_claim_mtp']);
    bjjSignatureProof.ref.issuer_auth_non_rev_proof =
        IDENRevocationStatus.fromJson(json['issuer_auth_non_rev_proof']);
    return bjjSignatureProof.ref;
  }

  Map<String, dynamic> toJson() => {
        'issuer_id': issuer_id.toJson(),
        'signature': signature.toJson(),
        'issuer_tree_state': issuer_tree_state.toJson(),
        'issuer_auth_claim': issuer_auth_claim.ref.toJson(),
        'issuer_auth_claim_mtp': issuer_auth_claim_mtp != ffi.nullptr
            ? issuer_auth_claim_mtp.ref.toJson()
            : "",
        'issuer_auth_non_rev_proof': issuer_auth_non_rev_proof.toJson(),
      };
}

typedef IDENId = _IDENId;
typedef IDENBJJSignature = _IDENBJJSignature;
typedef IDENClaim = _IDENClaim;
typedef IDENRevocationStatus = _IDENRevocationStatus;

class _IDENCircuitsClaim extends ffi.Struct {
  external ffi.Pointer<IDENClaim> core_claim;

  external IDENTreeState tree_state;

  external IDENId issuer_id;

  external ffi.Pointer<IDENProof> proof;

  external IDENRevocationStatus non_rev_proof;

  external IDENBCircuitsBJJSignatureProof signature_proof;

  static _IDENCircuitsClaim fromJson(Map<String, dynamic> json) {
    ffi.Pointer<_IDENCircuitsClaim> claim = malloc<_IDENCircuitsClaim>();
    claim.ref.core_claim = IDENClaim.fromJson(json['core_claim']);
    claim.ref.tree_state = IDENTreeState.fromJson(json['tree_state']);
    claim.ref.issuer_id = IDENId.fromJson(json['issuer_id']);
    claim.ref.proof = IDENProof.fromJson(json['proof']);
    claim.ref.non_rev_proof =
        IDENRevocationStatus.fromJson(json['non_rev_proof']);
    claim.ref.signature_proof =
        IDENBCircuitsBJJSignatureProof.fromJson(json['signature_proof']);
    return claim.ref;
  }

  Map<String, dynamic> toJson() => {
        'core_claim': core_claim.ref.toJson(),
        'tree_state': tree_state.toJson(),
        'issuer_id': issuer_id.toJson(),
        'proof': proof.ref.toJson(),
        'non_rev_proof': non_rev_proof.toJson(),
        'signature_proof': signature_proof.toJson(),
      };
}

typedef IDENBCircuitsBJJSignatureProof = _IDENBCircuitsBJJSignatureProof;

class _IDENQuery extends ffi.Struct {
  @ffi.Int32()
  external int slot_index;

  external ffi.Pointer<ffi.Pointer<IDENBigInt>> values;

  @size_t()
  external int values_num;

  @ffi.Int32()
  external int operator1;
}

typedef IDENBigInt = _IDENBigInt;

class _IDENAtomicQueryMTPInputs extends ffi.Struct {
  external IDENId id;

  external IDENCircuitClaim auth_claim;

  external ffi.Pointer<IDENBigInt> challenge;

  external IDENBJJSignature signature;

  external IDENCircuitClaim claim;

  @time_t()
  external int current_timestamp;

  external IDENQuery query;
}

typedef IDENCircuitClaim = _IDENCircuitsClaim;
typedef IDENQuery = _IDENQuery;

class _IDENAtomicQuerySigInputs extends ffi.Struct {
  external IDENId id;

  external IDENCircuitClaim auth_claim;

  external ffi.Pointer<IDENBigInt> challenge;

  external IDENBJJSignature signature;

  external IDENCircuitClaim claim;

  external IDENQuery query;

  @time_t()
  external int current_timestamp;
}

class _IDENAuthInputs extends ffi.Struct {
  external IDENId id;

  external IDENCircuitClaim auth_claim;

  external IDENBJJSignature signature;

  external ffi.Pointer<IDENBigInt> challenge;
}

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.Int64;
typedef GoUint8 = ffi.Uint8;
typedef IDENStatus = _IDENStatus;
typedef IDENMerkleTreeEntry = _IDENMerkleTreeEntry;
typedef IDENMerkleTree = _IDENMerkleTree;
typedef IDENAtomicQueryMTPInputs = _IDENAtomicQueryMTPInputs;
typedef IDENAtomicQuerySigInputs = _IDENAtomicQuerySigInputs;
typedef IDENAuthInputs = _IDENAuthInputs;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 120000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 120300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES = 2380;

const int _X86_INSTRUCTION_STATE_CACHELINE_SIZE = 64;

const int __LASTBRANCH_MAX = 32;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int TIME_UTC = 1;

const int IDEN_MT_HASH_SIZE = 32;

const int IDEN_ENTRY_DIM = 4;

const int IDEN_ID_SIZE = 31;

const int IDEN_BJJ_SIGNATURE_SIZE = 64;
