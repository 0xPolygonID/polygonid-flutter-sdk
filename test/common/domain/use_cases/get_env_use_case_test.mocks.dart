// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/common/domain/use_cases/get_env_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/common/domain/entities/env_entity.dart'
    as _i2;
import 'package:polygonid_flutter_sdk/common/domain/repositories/config_repository.dart'
    as _i3;
import 'package:polygonid_flutter_sdk/common/domain/use_cases/get_config_use_case.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEnvEntity_0 extends _i1.SmartFake implements _i2.EnvEntity {
  _FakeEnvEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigRepository extends _i1.Mock implements _i3.ConfigRepository {
  MockConfigRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> getConfig({required _i5.PolygonIdConfig? config}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConfig,
          [],
          {#config: config},
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<_i2.EnvEntity> getEnv() => (super.noSuchMethod(
        Invocation.method(
          #getEnv,
          [],
        ),
        returnValue: _i4.Future<_i2.EnvEntity>.value(_FakeEnvEntity_0(
          this,
          Invocation.method(
            #getEnv,
            [],
          ),
        )),
      ) as _i4.Future<_i2.EnvEntity>);
  @override
  _i4.Future<void> setEnv({required _i2.EnvEntity? env}) => (super.noSuchMethod(
        Invocation.method(
          #setEnv,
          [],
          {#env: env},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
