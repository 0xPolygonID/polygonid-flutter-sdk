// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/common/data/repositories/config_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/common/data/data_sources/mappers/env_mapper.dart'
    as _i6;
import 'package:polygonid_flutter_sdk/common/data/data_sources/storage_key_value_data_source.dart'
    as _i3;
import 'package:polygonid_flutter_sdk/common/domain/entities/env_entity.dart'
    as _i2;
import 'package:sembast/sembast.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEnvEntity_0 extends _i1.SmartFake implements _i2.EnvEntity {
  _FakeEnvEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StorageKeyValueDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageKeyValueDataSource extends _i1.Mock
    implements _i3.StorageKeyValueDataSource {
  MockStorageKeyValueDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<dynamic> get({
    required String? key,
    _i5.DatabaseClient? database,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #key: key,
            #database: database,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<void> store({
    required String? key,
    required dynamic value,
    _i5.DatabaseClient? database,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [],
          {
            #key: key,
            #value: value,
            #database: database,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<String?> remove({
    required String? key,
    _i5.DatabaseClient? database,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
          {
            #key: key,
            #database: database,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [EnvMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnvMapper extends _i1.Mock implements _i6.EnvMapper {
  MockEnvMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EnvEntity mapFrom(Map<String, dynamic>? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: _FakeEnvEntity_0(
          this,
          Invocation.method(
            #mapFrom,
            [from],
          ),
        ),
      ) as _i2.EnvEntity);
  @override
  Map<String, dynamic> mapTo(_i2.EnvEntity? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
