// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/identity/domain/use_cases/identity/create_identity_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/identity/domain/use_cases/get_current_env_did_identifier_use_case.dart'
    as _i4;
import 'package:polygonid_flutter_sdk/identity/domain/use_cases/get_public_keys_use_case.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetPublicKeysUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPublicKeysUseCase extends _i1.Mock
    implements _i2.GetPublicKeysUseCase {
  MockGetPublicKeysUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> execute({required String? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);
}

/// A class which mocks [GetCurrentEnvDidIdentifierUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentEnvDidIdentifierUseCase extends _i1.Mock
    implements _i4.GetCurrentEnvDidIdentifierUseCase {
  MockGetCurrentEnvDidIdentifierUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> execute(
          {required _i4.GetCurrentEnvDidIdentifierParam? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}
