// Mocks generated by Mockito 5.2.0 from annotations
// in polygonid_flutter_sdk/test/domain/use_cases/get_auth_token_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:typed_data' as _i10;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/common/domain/entities/filter_entity.dart'
    as _i13;
import 'package:polygonid_flutter_sdk/credential/domain/entities/claim_entity.dart'
    as _i11;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/iden3_message_entity.dart'
    as _i7;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/proof_entity.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/proof_request_entity.dart'
    as _i12;
import 'package:polygonid_flutter_sdk/iden3comm/domain/repositories/iden3comm_repository.dart'
    as _i4;
import 'package:polygonid_flutter_sdk/identity/domain/entities/identity_entity.dart'
    as _i6;
import 'package:polygonid_flutter_sdk/identity/libs/jwz/jwz_proof.dart' as _i3;
import 'package:polygonid_flutter_sdk/proof_generation/domain/entities/circuit_data_entity.dart'
    as _i2;
import 'package:polygonid_flutter_sdk/proof_generation/domain/repositories/proof_repository.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCircuitDataEntity_0 extends _i1.Fake
    implements _i2.CircuitDataEntity {}

class _FakeJWZProof_1 extends _i1.Fake implements _i3.JWZProof {}

/// A class which mocks [Iden3commRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIden3commRepository extends _i1.Mock
    implements _i4.Iden3commRepository {
  MockIden3commRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> authenticate({String? url, String? authToken}) =>
      (super.noSuchMethod(
          Invocation.method(
              #authenticate, [], {#url: url, #authToken: authToken}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> getAuthToken(
          {_i6.IdentityEntity? identityEntity,
          String? message,
          _i2.CircuitDataEntity? authData}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthToken, [], {
            #identityEntity: identityEntity,
            #message: message,
            #authData: authData
          }),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getAuthResponse(
          {String? identifier,
          _i7.Iden3MessageEntity? message,
          List<_i8.ProofEntity>? scope,
          String? pushUrl,
          String? pushToken,
          String? didIdentifier,
          String? packageName}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthResponse, [], {
            #identifier: identifier,
            #message: message,
            #scope: scope,
            #pushUrl: pushUrl,
            #pushToken: pushToken,
            #didIdentifier: didIdentifier,
            #packageName: packageName
          }),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getAuthCallback({_i7.Iden3MessageEntity? message}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthCallback, [], {#message: message}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
}

/// A class which mocks [ProofRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProofRepository extends _i1.Mock implements _i9.ProofRepository {
  MockProofRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> isCircuitSupported({String? circuitId}) =>
      (super.noSuchMethod(
          Invocation.method(#isCircuitSupported, [], {#circuitId: circuitId}),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.CircuitDataEntity> loadCircuitFiles(String? circuitId) =>
      (super.noSuchMethod(Invocation.method(#loadCircuitFiles, [circuitId]),
              returnValue: Future<_i2.CircuitDataEntity>.value(
                  _FakeCircuitDataEntity_0()))
          as _i5.Future<_i2.CircuitDataEntity>);
  @override
  _i5.Future<_i10.Uint8List> calculateAtomicQueryInputs(
          String? challenge,
          _i11.ClaimEntity? authClaim,
          String? circuitId,
          _i12.ProofQueryParamEntity? queryParam,
          String? pubX,
          String? pubY,
          String? signature,
          Map<String, dynamic>? revocationStatus) =>
      (super.noSuchMethod(
              Invocation.method(#calculateAtomicQueryInputs, [
                challenge,
                authClaim,
                circuitId,
                queryParam,
                pubX,
                pubY,
                signature,
                revocationStatus
              ]),
              returnValue: Future<_i10.Uint8List>.value(_i10.Uint8List(0)))
          as _i5.Future<_i10.Uint8List>);
  @override
  _i5.Future<_i10.Uint8List> calculateWitness(
          _i2.CircuitDataEntity? circuitData,
          _i10.Uint8List? atomicQueryInputs) =>
      (super.noSuchMethod(
              Invocation.method(
                  #calculateWitness, [circuitData, atomicQueryInputs]),
              returnValue: Future<_i10.Uint8List>.value(_i10.Uint8List(0)))
          as _i5.Future<_i10.Uint8List>);
  @override
  _i5.Future<_i3.JWZProof> prove(
          _i2.CircuitDataEntity? circuitData, _i10.Uint8List? wtnsBytes) =>
      (super.noSuchMethod(Invocation.method(#prove, [circuitData, wtnsBytes]),
              returnValue: Future<_i3.JWZProof>.value(_FakeJWZProof_1()))
          as _i5.Future<_i3.JWZProof>);
  @override
  _i5.Future<List<_i13.FilterEntity>> getFilters(
          {_i12.ProofRequestEntity? request}) =>
      (super.noSuchMethod(
              Invocation.method(#getFilters, [], {#request: request}),
              returnValue:
                  Future<List<_i13.FilterEntity>>.value(<_i13.FilterEntity>[]))
          as _i5.Future<List<_i13.FilterEntity>>);
  @override
  _i5.Future<List<_i12.ProofRequestEntity>> getRequests(
          {_i7.Iden3MessageEntity? message}) =>
      (super.noSuchMethod(
              Invocation.method(#getRequests, [], {#message: message}),
              returnValue: Future<List<_i12.ProofRequestEntity>>.value(
                  <_i12.ProofRequestEntity>[]))
          as _i5.Future<List<_i12.ProofRequestEntity>>);
}
