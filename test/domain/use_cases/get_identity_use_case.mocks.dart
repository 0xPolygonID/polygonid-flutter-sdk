// Mocks generated by Mockito 5.2.0 from annotations
// in privadoid_sdk/test/domain/use_cases/get_identity_use_case.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:privadoid_sdk/domain/common/tuples.dart' as _i2;
import 'package:privadoid_sdk/domain/repositories/identity_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePair_0<M, N> extends _i1.Fake implements _i2.Pair<M, N> {}

/// A class which mocks [IdentityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdentityRepository extends _i1.Mock
    implements _i3.IdentityRepository {
  MockIdentityRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Pair<String, String>> getIdentity({String? key}) =>
      (super.noSuchMethod(
              Invocation.method(#getIdentity, [], {#seedPhrase: key}),
              returnValue: Future<_i2.Pair<String, String>>.value(
                  _FakePair_0<String, String>()))
          as _i4.Future<_i2.Pair<String, String>>);
  @override
  _i4.Future<void> checkSeedPhraseValidity({String? seedPhrase}) =>
      (super.noSuchMethod(
          Invocation.method(
              #checkSeedPhraseValidity, [], {#seedPhrase: seedPhrase}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
