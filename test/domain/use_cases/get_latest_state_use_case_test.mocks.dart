// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/domain/use_cases/get_latest_state_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/identity/domain/entities/hash_entity.dart'
    as _i3;
import 'package:polygonid_flutter_sdk/identity/domain/entities/node_entity.dart'
    as _i2;
import 'package:polygonid_flutter_sdk/identity/domain/entities/tree_state_entity.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/identity/domain/entities/tree_stype.dart'
    as _i7;
import 'package:polygonid_flutter_sdk/identity/domain/repositories/smt_repository.dart'
    as _i5;
import 'package:polygonid_flutter_sdk/proof/domain/entities/proof_entity.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNodeEntity_0 extends _i1.SmartFake implements _i2.NodeEntity {
  _FakeNodeEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHashEntity_1 extends _i1.SmartFake implements _i3.HashEntity {
  _FakeHashEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProofEntity_2 extends _i1.SmartFake implements _i4.ProofEntity {
  _FakeProofEntity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SMTRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSMTRepository extends _i1.Mock implements _i5.SMTRepository {
  MockSMTRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> addLeaf({
    required _i2.NodeEntity? leaf,
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLeaf,
          [],
          {
            #leaf: leaf,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i2.NodeEntity> getNode({
    required _i3.HashEntity? hash,
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNode,
          [],
          {
            #hash: hash,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<_i2.NodeEntity>.value(_FakeNodeEntity_0(
          this,
          Invocation.method(
            #getNode,
            [],
            {
              #hash: hash,
              #type: type,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i6.Future<_i2.NodeEntity>);
  @override
  _i6.Future<void> addNode({
    required _i3.HashEntity? hash,
    required _i2.NodeEntity? node,
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNode,
          [],
          {
            #hash: hash,
            #node: node,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i3.HashEntity> getRoot({
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoot,
          [],
          {
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<_i3.HashEntity>.value(_FakeHashEntity_1(
          this,
          Invocation.method(
            #getRoot,
            [],
            {
              #type: type,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i6.Future<_i3.HashEntity>);
  @override
  _i6.Future<void> setRoot({
    required _i3.HashEntity? root,
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRoot,
          [],
          {
            #root: root,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i4.ProofEntity> generateProof({
    required _i3.HashEntity? key,
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateProof,
          [],
          {
            #key: key,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<_i4.ProofEntity>.value(_FakeProofEntity_2(
          this,
          Invocation.method(
            #generateProof,
            [],
            {
              #key: key,
              #type: type,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i6.Future<_i4.ProofEntity>);
  @override
  _i6.Future<void> createSMT({
    required int? maxLevels,
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSMT,
          [],
          {
            #maxLevels: maxLevels,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> removeSMT({
    required _i7.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSMT,
          [],
          {
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<String> hashState({
    required String? claims,
    required String? revocation,
    required String? roots,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashState,
          [],
          {
            #claims: claims,
            #revocation: revocation,
            #roots: roots,
          },
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<Map<String, dynamic>> convertState(
          {required _i8.TreeStateEntity? state}) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertState,
          [],
          {#state: state},
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
}
