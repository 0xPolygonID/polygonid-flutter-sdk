// Mocks generated by Mockito 5.2.0 from annotations
// in polygonid_flutter_sdk/test/domain/use_cases/authenticate_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/iden3_message_entity.dart'
    as _i6;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/proof_entity.dart'
    as _i7;
import 'package:polygonid_flutter_sdk/iden3comm/domain/repositories/iden3comm_repository.dart'
    as _i2;
import 'package:polygonid_flutter_sdk/iden3comm/domain/use_cases/get_proofs_use_case.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/identity/domain/entities/identity_entity.dart'
    as _i4;
import 'package:polygonid_flutter_sdk/proof_generation/domain/entities/circuit_data_entity.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [Iden3commRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIden3commRepository extends _i1.Mock
    implements _i2.Iden3commRepository {
  MockIden3commRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> authenticate({String? url, String? authToken}) =>
      (super.noSuchMethod(
          Invocation.method(
              #authenticate, [], {#url: url, #authToken: authToken}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<String> getAuthToken(
          {_i4.IdentityEntity? identityEntity,
          String? message,
          _i5.CircuitDataEntity? authData}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthToken, [], {
            #identityEntity: identityEntity,
            #message: message,
            #authData: authData
          }),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<String> getAuthResponse(
          {String? identifier,
          _i6.Iden3MessageEntity? message,
          List<_i7.ProofEntity>? scope,
          String? pushToken}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthResponse, [], {
            #identifier: identifier,
            #message: message,
            #scope: scope,
            #pushToken: pushToken
          }),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<String> getAuthCallback({_i6.Iden3MessageEntity? message}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthCallback, [], {#message: message}),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
}

/// A class which mocks [GetProofsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProofsUseCase extends _i1.Mock implements _i8.GetProofsUseCase {
  MockGetProofsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i7.ProofEntity>> execute({_i8.GetProofsParam? param}) =>
      (super.noSuchMethod(Invocation.method(#execute, [], {#param: param}),
              returnValue:
                  Future<List<_i7.ProofEntity>>.value(<_i7.ProofEntity>[]))
          as _i3.Future<List<_i7.ProofEntity>>);
}
