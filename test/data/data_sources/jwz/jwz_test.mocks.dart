// Mocks generated by Mockito 5.2.0 from annotations
// in polygonid_flutter_sdk/test/data/data_sources/jwz/jwz_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/identity/libs/jwz/jwz_proof.dart' as _i2;
import 'package:polygonid_flutter_sdk/identity/libs/jwz/jwz_token.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeJWZProof_0 extends _i1.Fake implements _i2.JWZProof {}

/// A class which mocks [JWZProver].
///
/// See the documentation for Mockito's code generation for more information.
class MockJWZProver extends _i1.Mock implements _i3.JWZProver {
  MockJWZProver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get alg =>
      (super.noSuchMethod(Invocation.getter(#alg), returnValue: '') as String);
  @override
  set alg(String? _alg) => super.noSuchMethod(Invocation.setter(#alg, _alg),
      returnValueForMissingStub: null);
  @override
  String get circuitID =>
      (super.noSuchMethod(Invocation.getter(#circuitID), returnValue: '')
          as String);
  @override
  set circuitID(String? _circuitID) =>
      super.noSuchMethod(Invocation.setter(#circuitID, _circuitID),
          returnValueForMissingStub: null);
  @override
  _i4.Future<bool> verify(_i5.Uint8List? hash, _i2.JWZProof? proof,
          _i5.Uint8List? verificationKey) =>
      (super.noSuchMethod(
          Invocation.method(#verify, [hash, proof, verificationKey]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.JWZProof> prove(_i5.Uint8List? inputs,
          _i5.Uint8List? provingKey, _i5.Uint8List? wasm) =>
      (super.noSuchMethod(Invocation.method(#prove, [inputs, provingKey, wasm]),
              returnValue: Future<_i2.JWZProof>.value(_FakeJWZProof_0()))
          as _i4.Future<_i2.JWZProof>);
}

/// A class which mocks [JWZInputPreparer].
///
/// See the documentation for Mockito's code generation for more information.
class MockJWZInputPreparer extends _i1.Mock implements _i3.JWZInputPreparer {
  MockJWZInputPreparer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Uint8List> prepare(_i5.Uint8List? hash, String? circuitID) =>
      (super.noSuchMethod(Invocation.method(#prepare, [hash, circuitID]),
              returnValue: Future<_i5.Uint8List>.value(_i5.Uint8List(0)))
          as _i4.Future<_i5.Uint8List>);
}
