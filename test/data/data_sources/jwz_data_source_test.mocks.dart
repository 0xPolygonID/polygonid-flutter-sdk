// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/data/data_sources/jwz_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/credential/data/dtos/claim_info_dto.dart'
    as _i9;
import 'package:polygonid_flutter_sdk/credential/data/dtos/revocation_status.dart'
    as _i10;
import 'package:polygonid_flutter_sdk/identity/data/data_sources/jwz_data_source.dart'
    as _i11;
import 'package:polygonid_flutter_sdk/identity/data/data_sources/prepare_inputs_data_source.dart'
    as _i6;
import 'package:polygonid_flutter_sdk/identity/data/data_sources/wallet_data_source.dart'
    as _i3;
import 'package:polygonid_flutter_sdk/identity/libs/bjj/privadoid_wallet.dart'
    as _i2;
import 'package:polygonid_flutter_sdk/proof/data/dtos/gist_proof_dto.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/proof/data/dtos/proof_dto.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePrivadoIdWallet_0 extends _i1.SmartFake
    implements _i2.PrivadoIdWallet {
  _FakePrivadoIdWallet_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WalletDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletDataSource extends _i1.Mock implements _i3.WalletDataSource {
  MockWalletDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PrivadoIdWallet> createWallet({
    _i5.Uint8List? secret,
    required String? accessMessage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createWallet,
          [],
          {
            #secret: secret,
            #accessMessage: accessMessage,
          },
        ),
        returnValue:
            _i4.Future<_i2.PrivadoIdWallet>.value(_FakePrivadoIdWallet_0(
          this,
          Invocation.method(
            #createWallet,
            [],
            {
              #secret: secret,
              #accessMessage: accessMessage,
            },
          ),
        )),
      ) as _i4.Future<_i2.PrivadoIdWallet>);
  @override
  _i4.Future<_i2.PrivadoIdWallet> getWallet(
          {required _i5.Uint8List? privateKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWallet,
          [],
          {#privateKey: privateKey},
        ),
        returnValue:
            _i4.Future<_i2.PrivadoIdWallet>.value(_FakePrivadoIdWallet_0(
          this,
          Invocation.method(
            #getWallet,
            [],
            {#privateKey: privateKey},
          ),
        )),
      ) as _i4.Future<_i2.PrivadoIdWallet>);
  @override
  _i4.Future<String> signMessage({
    required _i5.Uint8List? privateKey,
    required String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signMessage,
          [],
          {
            #privateKey: privateKey,
            #message: message,
          },
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
}

/// A class which mocks [PrepareInputsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrepareInputsDataSource extends _i1.Mock
    implements _i6.PrepareInputsDataSource {
  MockPrepareInputsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> prepareAuthInputs({
    required String? did,
    required int? profileNonce,
    required List<String>? authClaim,
    required _i7.ProofDTO? incProof,
    required _i7.ProofDTO? nonRevProof,
    required _i8.GistProofDTO? gistProof,
    required Map<String, dynamic>? treeState,
    required String? challenge,
    required String? signature,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareAuthInputs,
          [],
          {
            #did: did,
            #profileNonce: profileNonce,
            #authClaim: authClaim,
            #incProof: incProof,
            #nonRevProof: nonRevProof,
            #gistProof: gistProof,
            #treeState: treeState,
            #challenge: challenge,
            #signature: signature,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
  @override
  _i4.Future<String?> prepareAtomicQueryInputs(
    String? challenge,
    _i9.ClaimInfoDTO? claimInfo,
    String? circuitId,
    String? key,
    List<int>? values,
    int? operator,
    _i10.RevocationStatus? claimRevocationStatus,
    String? pubX,
    String? pubY,
    String? signature,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareAtomicQueryInputs,
          [
            challenge,
            claimInfo,
            circuitId,
            key,
            values,
            operator,
            claimRevocationStatus,
            pubX,
            pubY,
            signature,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [JWZIsolatesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockJWZIsolatesWrapper extends _i1.Mock
    implements _i11.JWZIsolatesWrapper {
  MockJWZIsolatesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>?> computeCalculateProof(
    _i5.Uint8List? inputs,
    _i5.Uint8List? provingKey,
    _i5.Uint8List? wasm,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #computeCalculateProof,
          [
            inputs,
            provingKey,
            wasm,
          ],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);
}
