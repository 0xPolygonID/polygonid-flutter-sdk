// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/data/repositories/iden3comm_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i11;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/common/domain/entities/filter_entity.dart'
    as _i18;
import 'package:polygonid_flutter_sdk/credential/data/dtos/claim_dto.dart'
    as _i3;
import 'package:polygonid_flutter_sdk/iden3comm/data/data_sources/lib_pidcore_iden3comm_data_source.dart'
    as _i6;
import 'package:polygonid_flutter_sdk/iden3comm/data/data_sources/remote_iden3comm_data_source.dart'
    as _i4;
import 'package:polygonid_flutter_sdk/iden3comm/data/dtos/response/auth/auth_response.dart'
    as _i9;
import 'package:polygonid_flutter_sdk/iden3comm/data/mappers/auth_inputs_mapper.dart'
    as _i10;
import 'package:polygonid_flutter_sdk/iden3comm/data/mappers/auth_proof_mapper.dart'
    as _i12;
import 'package:polygonid_flutter_sdk/iden3comm/data/mappers/auth_response_mapper.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/iden3comm/data/mappers/gist_proof_mapper.dart'
    as _i14;
import 'package:polygonid_flutter_sdk/iden3comm/data/mappers/proof_request_filters_mapper.dart'
    as _i17;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/proof_request_entity.dart'
    as _i19;
import 'package:polygonid_flutter_sdk/identity/data/data_sources/lib_babyjubjub_data_source.dart'
    as _i7;
import 'package:polygonid_flutter_sdk/identity/data/mappers/q_mapper.dart'
    as _i16;
import 'package:polygonid_flutter_sdk/proof/domain/entities/gist_proof_entity.dart'
    as _i15;
import 'package:polygonid_flutter_sdk/proof/domain/entities/proof_entity.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClaimDTO_2 extends _i1.SmartFake implements _i3.ClaimDTO {
  _FakeClaimDTO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteIden3commDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteIden3commDataSource extends _i1.Mock
    implements _i4.RemoteIden3commDataSource {
  MockRemoteIden3commDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  _i5.Future<_i2.Response> authWithToken({
    required String? token,
    required String? url,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authWithToken,
          [],
          {
            #token: token,
            #url: url,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #authWithToken,
            [],
            {
              #token: token,
              #url: url,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i3.ClaimDTO> fetchClaim({
    required String? authToken,
    required String? url,
    required String? did,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchClaim,
          [],
          {
            #authToken: authToken,
            #url: url,
            #did: did,
          },
        ),
        returnValue: _i5.Future<_i3.ClaimDTO>.value(_FakeClaimDTO_2(
          this,
          Invocation.method(
            #fetchClaim,
            [],
            {
              #authToken: authToken,
              #url: url,
              #did: did,
            },
          ),
        )),
      ) as _i5.Future<_i3.ClaimDTO>);
  @override
  void throwExceptionOnStatusCode(
    int? statusCode,
    String? responseBody,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #throwExceptionOnStatusCode,
          [
            statusCode,
            responseBody,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LibPolygonIdCoreIden3commDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLibPolygonIdCoreIden3commDataSource extends _i1.Mock
    implements _i6.LibPolygonIdCoreIden3commDataSource {
  MockLibPolygonIdCoreIden3commDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getAuthInputs({
    required String? did,
    required int? profileNonce,
    required List<String>? authClaim,
    required Map<String, dynamic>? incProof,
    required Map<String, dynamic>? nonRevProof,
    required Map<String, dynamic>? gistProof,
    required Map<String, dynamic>? treeState,
    required String? challenge,
    required String? signature,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthInputs,
          [],
          {
            #did: did,
            #profileNonce: profileNonce,
            #authClaim: authClaim,
            #incProof: incProof,
            #nonRevProof: nonRevProof,
            #gistProof: gistProof,
            #treeState: treeState,
            #challenge: challenge,
            #signature: signature,
          },
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [LibBabyJubJubDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLibBabyJubJubDataSource extends _i1.Mock
    implements _i7.LibBabyJubJubDataSource {
  MockLibBabyJubJubDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> hashPoseidon(String? input1) => (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon,
          [input1],
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<String> hashPoseidon2(
    String? input1,
    String? input2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon2,
          [
            input1,
            input2,
          ],
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<String> hashPoseidon3(
    String? input1,
    String? input2,
    String? input3,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon3,
          [
            input1,
            input2,
            input3,
          ],
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<String> hashPoseidon4(
    String? input1,
    String? input2,
    String? input3,
    String? input4,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon4,
          [
            input1,
            input2,
            input3,
            input4,
          ],
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
}

/// A class which mocks [AuthResponseMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthResponseMapper extends _i1.Mock
    implements _i8.AuthResponseMapper {
  MockAuthResponseMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String mapFrom(_i9.AuthResponse? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [AuthInputsMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthInputsMapper extends _i1.Mock implements _i10.AuthInputsMapper {
  MockAuthInputsMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Uint8List mapFrom(String? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: _i11.Uint8List(0),
      ) as _i11.Uint8List);
}

/// A class which mocks [AuthProofMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProofMapper extends _i1.Mock implements _i12.AuthProofMapper {
  MockAuthProofMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> mapTo(_i13.ProofEntity? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [GistProofMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGistProofMapper extends _i1.Mock implements _i14.GistProofMapper {
  MockGistProofMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> mapTo(_i15.GistProofEntity? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [QMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockQMapper extends _i1.Mock implements _i16.QMapper {
  MockQMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String mapFrom(String? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [ProofRequestFiltersMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockProofRequestFiltersMapper extends _i1.Mock
    implements _i17.ProofRequestFiltersMapper {
  MockProofRequestFiltersMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i18.FilterEntity> mapFrom(_i19.ProofRequestEntity? from) =>
      (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: <_i18.FilterEntity>[],
      ) as List<_i18.FilterEntity>);
}
