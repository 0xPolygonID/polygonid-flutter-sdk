// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/data/repositories/smt_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/identity/data/data_sources/lib_babyjubjub_data_source.dart'
    as _i12;
import 'package:polygonid_flutter_sdk/identity/data/data_sources/smt_data_source.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/identity/data/data_sources/storage_smt_data_source.dart'
    as _i10;
import 'package:polygonid_flutter_sdk/identity/data/dtos/hash_dto.dart' as _i2;
import 'package:polygonid_flutter_sdk/identity/data/dtos/node_dto.dart' as _i4;
import 'package:polygonid_flutter_sdk/identity/data/mappers/hash_mapper.dart'
    as _i14;
import 'package:polygonid_flutter_sdk/identity/data/mappers/node_mapper.dart'
    as _i13;
import 'package:polygonid_flutter_sdk/identity/data/mappers/tree_state_mapper.dart'
    as _i18;
import 'package:polygonid_flutter_sdk/identity/data/mappers/tree_type_mapper.dart'
    as _i16;
import 'package:polygonid_flutter_sdk/identity/domain/entities/hash_entity.dart'
    as _i6;
import 'package:polygonid_flutter_sdk/identity/domain/entities/node_entity.dart'
    as _i5;
import 'package:polygonid_flutter_sdk/identity/domain/entities/tree_state_entity.dart'
    as _i19;
import 'package:polygonid_flutter_sdk/identity/domain/entities/tree_stype.dart'
    as _i17;
import 'package:polygonid_flutter_sdk/proof/data/dtos/proof_dto.dart' as _i3;
import 'package:polygonid_flutter_sdk/proof/data/mappers/proof_mapper.dart'
    as _i15;
import 'package:polygonid_flutter_sdk/proof/domain/entities/proof_entity.dart'
    as _i7;
import 'package:sembast/sembast.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHashDTO_0 extends _i1.SmartFake implements _i2.HashDTO {
  _FakeHashDTO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProofDTO_1 extends _i1.SmartFake implements _i3.ProofDTO {
  _FakeProofDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNodeDTO_2 extends _i1.SmartFake implements _i4.NodeDTO {
  _FakeNodeDTO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNodeEntity_3 extends _i1.SmartFake implements _i5.NodeEntity {
  _FakeNodeEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHashEntity_4 extends _i1.SmartFake implements _i6.HashEntity {
  _FakeHashEntity_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProofEntity_5 extends _i1.SmartFake implements _i7.ProofEntity {
  _FakeProofEntity_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SMTDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSMTDataSource extends _i1.Mock implements _i8.SMTDataSource {
  MockSMTDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> createSMT({
    required int? maxLevels,
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSMT,
          [],
          {
            #maxLevels: maxLevels,
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> removeSMT({
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSMT,
          [],
          {
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> removeRoot({
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeRoot,
          [],
          {
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<_i2.HashDTO> getRoot({
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoot,
          [],
          {
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<_i2.HashDTO>.value(_FakeHashDTO_0(
          this,
          Invocation.method(
            #getRoot,
            [],
            {
              #storeName: storeName,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i9.Future<_i2.HashDTO>);
  @override
  _i9.Future<_i2.HashDTO> addLeaf({
    required _i4.NodeDTO? newNodeLeaf,
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLeaf,
          [],
          {
            #newNodeLeaf: newNodeLeaf,
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<_i2.HashDTO>.value(_FakeHashDTO_0(
          this,
          Invocation.method(
            #addLeaf,
            [],
            {
              #newNodeLeaf: newNodeLeaf,
              #storeName: storeName,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i9.Future<_i2.HashDTO>);
  @override
  _i9.Future<_i3.ProofDTO> generateProof({
    required _i2.HashDTO? key,
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateProof,
          [],
          {
            #key: key,
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<_i3.ProofDTO>.value(_FakeProofDTO_1(
          this,
          Invocation.method(
            #generateProof,
            [],
            {
              #key: key,
              #storeName: storeName,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i9.Future<_i3.ProofDTO>);
  @override
  _i9.Future<_i2.HashDTO> getProofTreeRoot({
    required _i3.ProofDTO? proof,
    required _i4.NodeDTO? node,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProofTreeRoot,
          [],
          {
            #proof: proof,
            #node: node,
          },
        ),
        returnValue: _i9.Future<_i2.HashDTO>.value(_FakeHashDTO_0(
          this,
          Invocation.method(
            #getProofTreeRoot,
            [],
            {
              #proof: proof,
              #node: node,
            },
          ),
        )),
      ) as _i9.Future<_i2.HashDTO>);
  @override
  _i9.Future<bool> verifyProof({
    required _i3.ProofDTO? proof,
    required _i4.NodeDTO? node,
    required _i2.HashDTO? treeRoot,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyProof,
          [],
          {
            #proof: proof,
            #node: node,
            #treeRoot: treeRoot,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
}

/// A class which mocks [StorageSMTDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageSMTDataSource extends _i1.Mock
    implements _i10.StorageSMTDataSource {
  MockStorageSMTDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i4.NodeDTO> getNode({
    required _i2.HashDTO? key,
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNode,
          [],
          {
            #key: key,
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<_i4.NodeDTO>.value(_FakeNodeDTO_2(
          this,
          Invocation.method(
            #getNode,
            [],
            {
              #key: key,
              #storeName: storeName,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i9.Future<_i4.NodeDTO>);
  @override
  _i9.Future<Map<String, Object?>?> getTransact({
    required String? storeName,
    required _i11.DatabaseClient? transaction,
    required _i2.HashDTO? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransact,
          [],
          {
            #storeName: storeName,
            #transaction: transaction,
            #key: key,
          },
        ),
        returnValue: _i9.Future<Map<String, Object?>?>.value(),
      ) as _i9.Future<Map<String, Object?>?>);
  @override
  _i9.Future<void> addNode({
    required _i2.HashDTO? key,
    required _i4.NodeDTO? node,
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNode,
          [],
          {
            #key: key,
            #node: node,
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> putTransact({
    required String? storeName,
    required _i11.DatabaseClient? transaction,
    required _i2.HashDTO? key,
    required _i4.NodeDTO? node,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putTransact,
          [],
          {
            #storeName: storeName,
            #transaction: transaction,
            #key: key,
            #node: node,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<_i2.HashDTO> getRoot({
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoot,
          [],
          {
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<_i2.HashDTO>.value(_FakeHashDTO_0(
          this,
          Invocation.method(
            #getRoot,
            [],
            {
              #storeName: storeName,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i9.Future<_i2.HashDTO>);
  @override
  _i9.Future<_i2.HashDTO> getRootTransact({
    required _i11.DatabaseClient? transaction,
    required String? storeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRootTransact,
          [],
          {
            #transaction: transaction,
            #storeName: storeName,
          },
        ),
        returnValue: _i9.Future<_i2.HashDTO>.value(_FakeHashDTO_0(
          this,
          Invocation.method(
            #getRootTransact,
            [],
            {
              #transaction: transaction,
              #storeName: storeName,
            },
          ),
        )),
      ) as _i9.Future<_i2.HashDTO>);
  @override
  _i9.Future<void> setRoot({
    required _i2.HashDTO? root,
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRoot,
          [],
          {
            #root: root,
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> setRootTransact({
    required _i11.DatabaseClient? transaction,
    required String? storeName,
    required _i2.HashDTO? root,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRootTransact,
          [],
          {
            #transaction: transaction,
            #storeName: storeName,
            #root: root,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<int> getMaxLevels({
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMaxLevels,
          [],
          {
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);
  @override
  _i9.Future<Map<String, Object?>?> getMaxLevelsTransact({
    required _i11.DatabaseClient? transaction,
    required String? storeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMaxLevelsTransact,
          [],
          {
            #transaction: transaction,
            #storeName: storeName,
          },
        ),
        returnValue: _i9.Future<Map<String, Object?>?>.value(),
      ) as _i9.Future<Map<String, Object?>?>);
  @override
  _i9.Future<void> setMaxLevels({
    required int? maxLevels,
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMaxLevels,
          [],
          {
            #maxLevels: maxLevels,
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> setMaxLevelsTransact({
    required _i11.DatabaseClient? transaction,
    required String? storeName,
    required int? maxLevels,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMaxLevelsTransact,
          [],
          {
            #transaction: transaction,
            #storeName: storeName,
            #maxLevels: maxLevels,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> removeSMT({
    required String? storeName,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSMT,
          [],
          {
            #storeName: storeName,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> removeSMTTransact({
    required _i11.DatabaseClient? transaction,
    required String? storeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSMTTransact,
          [],
          {
            #transaction: transaction,
            #storeName: storeName,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [LibBabyJubJubDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLibBabyJubJubDataSource extends _i1.Mock
    implements _i12.LibBabyJubJubDataSource {
  MockLibBabyJubJubDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String> hashPoseidon(String? input1) => (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon,
          [input1],
        ),
        returnValue: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<String> hashPoseidon2(
    String? input1,
    String? input2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon2,
          [
            input1,
            input2,
          ],
        ),
        returnValue: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<String> hashPoseidon3(
    String? input1,
    String? input2,
    String? input3,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon3,
          [
            input1,
            input2,
            input3,
          ],
        ),
        returnValue: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<String> hashPoseidon4(
    String? input1,
    String? input2,
    String? input3,
    String? input4,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashPoseidon4,
          [
            input1,
            input2,
            input3,
            input4,
          ],
        ),
        returnValue: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
}

/// A class which mocks [NodeMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockNodeMapper extends _i1.Mock implements _i13.NodeMapper {
  MockNodeMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.NodeEntity mapFrom(_i4.NodeDTO? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: _FakeNodeEntity_3(
          this,
          Invocation.method(
            #mapFrom,
            [from],
          ),
        ),
      ) as _i5.NodeEntity);
  @override
  _i4.NodeDTO mapTo(_i5.NodeEntity? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: _FakeNodeDTO_2(
          this,
          Invocation.method(
            #mapTo,
            [to],
          ),
        ),
      ) as _i4.NodeDTO);
}

/// A class which mocks [HashMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHashMapper extends _i1.Mock implements _i14.HashMapper {
  MockHashMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.HashEntity mapFrom(_i2.HashDTO? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: _FakeHashEntity_4(
          this,
          Invocation.method(
            #mapFrom,
            [from],
          ),
        ),
      ) as _i6.HashEntity);
  @override
  _i2.HashDTO mapTo(_i6.HashEntity? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: _FakeHashDTO_0(
          this,
          Invocation.method(
            #mapTo,
            [to],
          ),
        ),
      ) as _i2.HashDTO);
}

/// A class which mocks [ProofMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockProofMapper extends _i1.Mock implements _i15.ProofMapper {
  MockProofMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ProofEntity mapFrom(_i3.ProofDTO? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: _FakeProofEntity_5(
          this,
          Invocation.method(
            #mapFrom,
            [from],
          ),
        ),
      ) as _i7.ProofEntity);
  @override
  _i3.ProofDTO mapTo(_i7.ProofEntity? from) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [from],
        ),
        returnValue: _FakeProofDTO_1(
          this,
          Invocation.method(
            #mapTo,
            [from],
          ),
        ),
      ) as _i3.ProofDTO);
}

/// A class which mocks [TreeTypeMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeTypeMapper extends _i1.Mock implements _i16.TreeTypeMapper {
  MockTreeTypeMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String mapTo(_i17.TreeType? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [TreeStateMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeStateMapper extends _i1.Mock implements _i18.TreeStateMapper {
  MockTreeStateMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> mapTo(_i19.TreeStateEntity? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
