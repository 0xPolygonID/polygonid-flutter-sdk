// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/iden3comm/data/repositories/iden3comm_credential_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/common/domain/entities/filter_entity.dart'
    as _i9;
import 'package:polygonid_flutter_sdk/credential/data/dtos/claim_dto.dart'
    as _i3;
import 'package:polygonid_flutter_sdk/credential/data/mappers/claim_mapper.dart'
    as _i7;
import 'package:polygonid_flutter_sdk/credential/domain/entities/claim_entity.dart'
    as _i4;
import 'package:polygonid_flutter_sdk/iden3comm/data/data_sources/remote_iden3comm_data_source.dart'
    as _i5;
import 'package:polygonid_flutter_sdk/iden3comm/data/mappers/proof_request_filters_mapper.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/proof_request_entity.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClaimDTO_2 extends _i1.SmartFake implements _i3.ClaimDTO {
  _FakeClaimDTO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClaimEntity_3 extends _i1.SmartFake implements _i4.ClaimEntity {
  _FakeClaimEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteIden3commDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteIden3commDataSource extends _i1.Mock
    implements _i5.RemoteIden3commDataSource {
  MockRemoteIden3commDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  _i6.Future<_i2.Response> authWithToken({
    required String? token,
    required String? url,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authWithToken,
          [],
          {
            #token: token,
            #url: url,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #authWithToken,
            [],
            {
              #token: token,
              #url: url,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);
  @override
  _i6.Future<_i3.ClaimDTO> fetchClaim({
    required String? authToken,
    required String? url,
    required String? did,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchClaim,
          [],
          {
            #authToken: authToken,
            #url: url,
            #did: did,
          },
        ),
        returnValue: _i6.Future<_i3.ClaimDTO>.value(_FakeClaimDTO_2(
          this,
          Invocation.method(
            #fetchClaim,
            [],
            {
              #authToken: authToken,
              #url: url,
              #did: did,
            },
          ),
        )),
      ) as _i6.Future<_i3.ClaimDTO>);
  @override
  _i6.Future<Map<String, dynamic>> fetchSchema({required String? url}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSchema,
          [],
          {#url: url},
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> fetchVocab({
    required Map<String, dynamic>? schema,
    required String? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchVocab,
          [],
          {
            #schema: schema,
            #type: type,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
}

/// A class which mocks [ClaimMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockClaimMapper extends _i1.Mock implements _i7.ClaimMapper {
  MockClaimMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ClaimEntity mapFrom(_i3.ClaimDTO? from) => (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: _FakeClaimEntity_3(
          this,
          Invocation.method(
            #mapFrom,
            [from],
          ),
        ),
      ) as _i4.ClaimEntity);
  @override
  _i3.ClaimDTO mapTo(_i4.ClaimEntity? to) => (super.noSuchMethod(
        Invocation.method(
          #mapTo,
          [to],
        ),
        returnValue: _FakeClaimDTO_2(
          this,
          Invocation.method(
            #mapTo,
            [to],
          ),
        ),
      ) as _i3.ClaimDTO);
}

/// A class which mocks [ProofRequestFiltersMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockProofRequestFiltersMapper extends _i1.Mock
    implements _i8.ProofRequestFiltersMapper {
  MockProofRequestFiltersMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.FilterEntity> mapFrom(_i10.ProofRequestEntity? from) =>
      (super.noSuchMethod(
        Invocation.method(
          #mapFrom,
          [from],
        ),
        returnValue: <_i9.FilterEntity>[],
      ) as List<_i9.FilterEntity>);
}
